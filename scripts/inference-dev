#!/bin/sh

#
# This file simply redirects all passed arguments
# to checkers.inference.InferenceDevelLauncher
#

myDir="`dirname $0`"
case `uname -s` in
    CYGWIN*)
      myDir=`cygpath -m $mydir`
      ;;
esac

if [ "$myDir" = "" ];
then
    myDir="."
fi

ROOT=$(cd ${myDir}/../../ && pwd)

langtoolsDir="${ROOT}"/jsr308-langtools
annoToolsDir="${ROOT}"/annotation-tools
stubparserDir="${ROOT}"/stubparser
cfDir="${ROOT}"/checker-framework
cfiDir="${ROOT}"/checker-framework-inference
afuDir="${annoToolsDir}"/annotation-file-utilities
classes="build/classes/java"
resources="build/resources/main"

distDir="$cfiDir"/dist

jdkPaths="${cfDir}"/checker/dist/jdk8.jar

CFBuild="${cfDir}"/dataflow/"${classes}":"${cfDir}"/javacutil/"${classes}":"${cfDir}"/framework/"${classes}":"${cfDir}"/framework/"${resources}"
CFBuild="${CFBuild}":"${cfDir}"/checker/"${classes}":"${cfDir}"/checker/"${resources}":"${annoToolsDir}"/scene-lib/bin:"${langtoolsDir}"/build/classes

CFDepJars="${stubparserDir}"/javaparser-core/target/stubparser.jar:"${afuDir}"/lib/options-1.0.1.jar:"${afuDir}"/lib/plume-util-1.0.7.jar
CFDepJars="${CFDepJars}":"${afuDir}"/lib/guava-20.0.jar:"${afuDir}"/lib/bcel-util-1.0.0.jar

# sanity check: ensure each jar in CFDepJars actually exists in the file system
# total number of jars
numOfJars=`echo $CFDepJars | awk -F: '{print NF}'`

i=1
while [ $i -le $numOfJars ]; do
    jar=`echo "$CFDepJars" | awk -v i="$i" -F: '{print $i}'`

    if [ ! -f "${jar}" ];
    then
       echo "Jar file ${jar} not found."
       exit 1
    fi

    i=$(($i + 1))
done

CFIBuild="${cfiDir}/build/classes/java/main"

dependenciesJar="${distDir}/dependencies.jar"

if [ ! -f "${dependenciesJar}" ];
then
   echo "Dependencies Jar not found. Run './gradlew dependenciesJar' to build it."
   exit 1
fi

classpath=${CFBuild}:${CFDepJars}:${CFIBuild}:${dependenciesJar}

# append system CLASSPATH to -classpath, so that external checker could export their
# class files in system CLASSPATH, and let InferenceDevelLauncher append them in -classpath
# when invoking InferenceMain.
# TODO: using system CLASSPATH also seems not nice, we should refactor the InferenceLauncher
# and InferenceDevelLuancher, to have a better design on how to passing javac and CF arguments.
if [ "$CLASSPATH" != "" ] ; then
    classpath=${classpath}:${CLASSPATH}
fi

eval "java" \
     "-DInferenceDevelLauncher.binary=${distDir} " \
     "-DInferenceDevelLauncher.runtime.cp=${classpath} " \
     "-DInferenceDevelLauncher.annotated.jdk=${jdkPaths} " \
     "-classpath ${classpath} " \
     "checkers.inference.InferenceDevelLauncher " "$@"
